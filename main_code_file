# Tango Project - Sardinha - Using linear SVM model
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.ExcelFile( 'DataExcel.xlsx').parse('DataItunes', header = 0)
X = dataset.iloc[:, [3,4]].values
y = dataset.iloc[:, 7].values
                
# Splitting the dataset into the Training set and Test set
from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.10, random_state = 0)

#Fitting the classifier to the Train set
from sklearn.svm import SVC
classifier = SVC(kernel = 'linear')
classifier.fit(X_train,y_train)

#Predicting the test set results
y_pred = classifier.predict(X_test)

#Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_train,classifier.predict(X_train))

# Visualising the Train set results
X_set, y_set = X_train, y_train
labelList= ['1st and 3rd Part','2nd Part'] 
from matplotlib.colors import ListedColormap
X_set, y_set = X_train, y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green'))(i), label = labelList[i], edgecolor='black', linewidth='1', s=50)
plt.tick_params(axis='both', which='major', labelsize=14)
plt.xlabel('Category numbers',fontsize = 16)
plt.ylabel('Energy',fontsize = 16)
legend = plt.legend(bbox_to_anchor=(1.05, 1.05), fontsize= 12)
plt.show()

# Visualising the Test set results
from matplotlib.colors import ListedColormap
X_set, y_set = X_test, y_test
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_test)):
    plt.scatter(X_test[y_test == j, 0], X_test[y_test == j, 1],
                c = ListedColormap(('red', 'green'))(i), label = labelList[i], edgecolor='black', linewidth='1', s=50)
plt.tick_params(axis='both', which='major', labelsize=14)
plt.xlabel('Category numbers',fontsize = 16)
plt.ylabel('Energy',fontsize = 16)
legend = plt.legend(bbox_to_anchor=(1.05, 1.05), fontsize= 12)
plt.show()
